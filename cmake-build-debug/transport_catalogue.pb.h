// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_catalogue_proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class DistanceBetweenStops;
struct DistanceBetweenStopsDefaultTypeInternal;
extern DistanceBetweenStopsDefaultTypeInternal _DistanceBetweenStops_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_proto::Bus* Arena::CreateMaybeMessage<::transport_catalogue_proto::Bus>(Arena*);
template<> ::transport_catalogue_proto::DistanceBetweenStops* Arena::CreateMaybeMessage<::transport_catalogue_proto::DistanceBetweenStops>(Arena*);
template<> ::transport_catalogue_proto::Stop* Arena::CreateMaybeMessage<::transport_catalogue_proto::Stop>(Arena*);
template<> ::transport_catalogue_proto::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_proto {

// ===================================================================

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit constexpr Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return new Stop();
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stop& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLatFieldNumber = 2,
    kLngFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 3;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit constexpr Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bus* New() const final {
    return new Bus();
  }

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Bus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 2,
    kEndpointsFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  const std::string& stops(int index) const;
  std::string* mutable_stops(int index);
  void set_stops(int index, const std::string& value);
  void set_stops(int index, std::string&& value);
  void set_stops(int index, const char* value);
  void set_stops(int index, const char* value, size_t size);
  std::string* add_stops();
  void add_stops(const std::string& value);
  void add_stops(std::string&& value);
  void add_stops(const char* value);
  void add_stops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stops();
  private:
  const std::string& _internal_stops(int index) const;
  std::string* _internal_add_stops();
  public:

  // repeated string endpoints = 3;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  const std::string& endpoints(int index) const;
  std::string* mutable_endpoints(int index);
  void set_endpoints(int index, const std::string& value);
  void set_endpoints(int index, std::string&& value);
  void set_endpoints(int index, const char* value);
  void set_endpoints(int index, const char* value, size_t size);
  std::string* add_endpoints();
  void add_endpoints(const std::string& value);
  void add_endpoints(std::string&& value);
  void add_endpoints(const char* value);
  void add_endpoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& endpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_endpoints();
  private:
  const std::string& _internal_endpoints(int index) const;
  std::string* _internal_add_endpoints();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> endpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class DistanceBetweenStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.DistanceBetweenStops) */ {
 public:
  inline DistanceBetweenStops() : DistanceBetweenStops(nullptr) {}
  ~DistanceBetweenStops() override;
  explicit constexpr DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceBetweenStops(const DistanceBetweenStops& from);
  DistanceBetweenStops(DistanceBetweenStops&& from) noexcept
    : DistanceBetweenStops() {
    *this = ::std::move(from);
  }

  inline DistanceBetweenStops& operator=(const DistanceBetweenStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceBetweenStops& operator=(DistanceBetweenStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceBetweenStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceBetweenStops* internal_default_instance() {
    return reinterpret_cast<const DistanceBetweenStops*>(
               &_DistanceBetweenStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DistanceBetweenStops& a, DistanceBetweenStops& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceBetweenStops* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceBetweenStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistanceBetweenStops* New() const final {
    return new DistanceBetweenStops();
  }

  DistanceBetweenStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistanceBetweenStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceBetweenStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistanceBetweenStops& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceBetweenStops* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.DistanceBetweenStops";
  }
  protected:
  explicit DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFromFieldNumber = 1,
    kStopToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string stop_from = 1;
  void clear_stop_from();
  const std::string& stop_from() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_from(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_from();
  PROTOBUF_MUST_USE_RESULT std::string* release_stop_from();
  void set_allocated_stop_from(std::string* stop_from);
  private:
  const std::string& _internal_stop_from() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_from(const std::string& value);
  std::string* _internal_mutable_stop_from();
  public:

  // string stop_to = 2;
  void clear_stop_to();
  const std::string& stop_to() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_to(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_to();
  PROTOBUF_MUST_USE_RESULT std::string* release_stop_to();
  void set_allocated_stop_to(std::string* stop_to);
  private:
  const std::string& _internal_stop_to() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_to(const std::string& value);
  std::string* _internal_mutable_stop_to();
  public:

  // int32 distance = 3;
  void clear_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 distance() const;
  void set_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_distance() const;
  void _internal_set_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.DistanceBetweenStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_to_;
  ::PROTOBUF_NAMESPACE_ID::int32 distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit constexpr TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalogue* New() const final {
    return new TransportCatalogue();
  }

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportCatalogue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kDistancesBetweenStopsFieldNumber = 3,
    kStopsForMapFieldNumber = 4,
    kBusesForMapFieldNumber = 5,
    kRenderSettingsFieldNumber = 6,
    kRouterFieldNumber = 7,
  };
  // repeated .transport_catalogue_proto.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_proto::Stop& _internal_stops(int index) const;
  ::transport_catalogue_proto::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_proto::Stop& stops(int index) const;
  ::transport_catalogue_proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >&
      stops() const;

  // repeated .transport_catalogue_proto.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_catalogue_proto::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >*
      mutable_buses();
  private:
  const ::transport_catalogue_proto::Bus& _internal_buses(int index) const;
  ::transport_catalogue_proto::Bus* _internal_add_buses();
  public:
  const ::transport_catalogue_proto::Bus& buses(int index) const;
  ::transport_catalogue_proto::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >&
      buses() const;

  // repeated .transport_catalogue_proto.DistanceBetweenStops distances_between_stops = 3;
  int distances_between_stops_size() const;
  private:
  int _internal_distances_between_stops_size() const;
  public:
  void clear_distances_between_stops();
  ::transport_catalogue_proto::DistanceBetweenStops* mutable_distances_between_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >*
      mutable_distances_between_stops();
  private:
  const ::transport_catalogue_proto::DistanceBetweenStops& _internal_distances_between_stops(int index) const;
  ::transport_catalogue_proto::DistanceBetweenStops* _internal_add_distances_between_stops();
  public:
  const ::transport_catalogue_proto::DistanceBetweenStops& distances_between_stops(int index) const;
  ::transport_catalogue_proto::DistanceBetweenStops* add_distances_between_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >&
      distances_between_stops() const;

  // repeated string stops_for_map = 4;
  int stops_for_map_size() const;
  private:
  int _internal_stops_for_map_size() const;
  public:
  void clear_stops_for_map();
  const std::string& stops_for_map(int index) const;
  std::string* mutable_stops_for_map(int index);
  void set_stops_for_map(int index, const std::string& value);
  void set_stops_for_map(int index, std::string&& value);
  void set_stops_for_map(int index, const char* value);
  void set_stops_for_map(int index, const char* value, size_t size);
  std::string* add_stops_for_map();
  void add_stops_for_map(const std::string& value);
  void add_stops_for_map(std::string&& value);
  void add_stops_for_map(const char* value);
  void add_stops_for_map(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stops_for_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stops_for_map();
  private:
  const std::string& _internal_stops_for_map(int index) const;
  std::string* _internal_add_stops_for_map();
  public:

  // repeated string buses_for_map = 5;
  int buses_for_map_size() const;
  private:
  int _internal_buses_for_map_size() const;
  public:
  void clear_buses_for_map();
  const std::string& buses_for_map(int index) const;
  std::string* mutable_buses_for_map(int index);
  void set_buses_for_map(int index, const std::string& value);
  void set_buses_for_map(int index, std::string&& value);
  void set_buses_for_map(int index, const char* value);
  void set_buses_for_map(int index, const char* value, size_t size);
  std::string* add_buses_for_map();
  void add_buses_for_map(const std::string& value);
  void add_buses_for_map(std::string&& value);
  void add_buses_for_map(const char* value);
  void add_buses_for_map(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& buses_for_map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_buses_for_map();
  private:
  const std::string& _internal_buses_for_map(int index) const;
  std::string* _internal_add_buses_for_map();
  public:

  // .transport_catalogue_proto.RenderSettings render_settings = 6;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::transport_catalogue_proto::RenderSettings& render_settings() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::RenderSettings* release_render_settings();
  ::transport_catalogue_proto::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::transport_catalogue_proto::RenderSettings* render_settings);
  private:
  const ::transport_catalogue_proto::RenderSettings& _internal_render_settings() const;
  ::transport_catalogue_proto::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::transport_catalogue_proto::RenderSettings* render_settings);
  ::transport_catalogue_proto::RenderSettings* unsafe_arena_release_render_settings();

  // .transport_catalogue_proto.TransportRouter router = 7;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::transport_catalogue_proto::TransportRouter& router() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::TransportRouter* release_router();
  ::transport_catalogue_proto::TransportRouter* mutable_router();
  void set_allocated_router(::transport_catalogue_proto::TransportRouter* router);
  private:
  const ::transport_catalogue_proto::TransportRouter& _internal_router() const;
  ::transport_catalogue_proto::TransportRouter* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::transport_catalogue_proto::TransportRouter* router);
  ::transport_catalogue_proto::TransportRouter* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus > buses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops > distances_between_stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stops_for_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> buses_for_map_;
  ::transport_catalogue_proto::RenderSettings* render_settings_;
  ::transport_catalogue_proto::TransportRouter* router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Stop

// string name = 1;
inline void Stop::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Stop.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Stop.name)
}

// double lat = 2;
inline void Stop::clear_lat() {
  lat_ = 0;
}
inline double Stop::_internal_lat() const {
  return lat_;
}
inline double Stop::lat() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.lat)
  return _internal_lat();
}
inline void Stop::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Stop::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Stop.lat)
}

// double lng = 3;
inline void Stop::clear_lng() {
  lng_ = 0;
}
inline double Stop::_internal_lng() const {
  return lng_;
}
inline double Stop::lng() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.lng)
  return _internal_lng();
}
inline void Stop::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Stop::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Stop.lng)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Bus.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Bus.name)
}

// repeated string stops = 2;
inline int Bus::_internal_stops_size() const {
  return stops_.size();
}
inline int Bus::stops_size() const {
  return _internal_stops_size();
}
inline void Bus::clear_stops() {
  stops_.Clear();
}
inline std::string* Bus::add_stops() {
  std::string* _s = _internal_add_stops();
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_proto.Bus.stops)
  return _s;
}
inline const std::string& Bus::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const std::string& Bus::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.stops)
  return _internal_stops(index);
}
inline std::string* Bus::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Bus.stops)
  return stops_.Mutable(index);
}
inline void Bus::set_stops(int index, const std::string& value) {
  stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.stops)
}
inline void Bus::set_stops(int index, std::string&& value) {
  stops_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.stops)
}
inline void Bus::set_stops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_proto.Bus.stops)
}
inline void Bus::set_stops(int index, const char* value, size_t size) {
  stops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_proto.Bus.stops)
}
inline std::string* Bus::_internal_add_stops() {
  return stops_.Add();
}
inline void Bus::add_stops(const std::string& value) {
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.stops)
}
inline void Bus::add_stops(std::string&& value) {
  stops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.stops)
}
inline void Bus::add_stops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_proto.Bus.stops)
}
inline void Bus::add_stops(const char* value, size_t size) {
  stops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_proto.Bus.stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Bus.stops)
  return stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Bus.stops)
  return &stops_;
}

// repeated string endpoints = 3;
inline int Bus::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Bus::endpoints_size() const {
  return _internal_endpoints_size();
}
inline void Bus::clear_endpoints() {
  endpoints_.Clear();
}
inline std::string* Bus::add_endpoints() {
  std::string* _s = _internal_add_endpoints();
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_proto.Bus.endpoints)
  return _s;
}
inline const std::string& Bus::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const std::string& Bus::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.endpoints)
  return _internal_endpoints(index);
}
inline std::string* Bus::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Bus.endpoints)
  return endpoints_.Mutable(index);
}
inline void Bus::set_endpoints(int index, const std::string& value) {
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::set_endpoints(int index, std::string&& value) {
  endpoints_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::set_endpoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::set_endpoints(int index, const char* value, size_t size) {
  endpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_proto.Bus.endpoints)
}
inline std::string* Bus::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline void Bus::add_endpoints(const std::string& value) {
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::add_endpoints(std::string&& value) {
  endpoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::add_endpoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  endpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_proto.Bus.endpoints)
}
inline void Bus::add_endpoints(const char* value, size_t size) {
  endpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_proto.Bus.endpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::endpoints() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Bus.endpoints)
  return endpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Bus.endpoints)
  return &endpoints_;
}

// -------------------------------------------------------------------

// DistanceBetweenStops

// string stop_from = 1;
inline void DistanceBetweenStops::clear_stop_from() {
  stop_from_.ClearToEmpty();
}
inline const std::string& DistanceBetweenStops::stop_from() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DistanceBetweenStops.stop_from)
  return _internal_stop_from();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistanceBetweenStops::set_stop_from(ArgT0&& arg0, ArgT... args) {
 
 stop_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.DistanceBetweenStops.stop_from)
}
inline std::string* DistanceBetweenStops::mutable_stop_from() {
  std::string* _s = _internal_mutable_stop_from();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.DistanceBetweenStops.stop_from)
  return _s;
}
inline const std::string& DistanceBetweenStops::_internal_stop_from() const {
  return stop_from_.Get();
}
inline void DistanceBetweenStops::_internal_set_stop_from(const std::string& value) {
  
  stop_from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::_internal_mutable_stop_from() {
  
  return stop_from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::release_stop_from() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.DistanceBetweenStops.stop_from)
  return stop_from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DistanceBetweenStops::set_allocated_stop_from(std::string* stop_from) {
  if (stop_from != nullptr) {
    
  } else {
    
  }
  stop_from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_from,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.DistanceBetweenStops.stop_from)
}

// string stop_to = 2;
inline void DistanceBetweenStops::clear_stop_to() {
  stop_to_.ClearToEmpty();
}
inline const std::string& DistanceBetweenStops::stop_to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DistanceBetweenStops.stop_to)
  return _internal_stop_to();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistanceBetweenStops::set_stop_to(ArgT0&& arg0, ArgT... args) {
 
 stop_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.DistanceBetweenStops.stop_to)
}
inline std::string* DistanceBetweenStops::mutable_stop_to() {
  std::string* _s = _internal_mutable_stop_to();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.DistanceBetweenStops.stop_to)
  return _s;
}
inline const std::string& DistanceBetweenStops::_internal_stop_to() const {
  return stop_to_.Get();
}
inline void DistanceBetweenStops::_internal_set_stop_to(const std::string& value) {
  
  stop_to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::_internal_mutable_stop_to() {
  
  return stop_to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::release_stop_to() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.DistanceBetweenStops.stop_to)
  return stop_to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DistanceBetweenStops::set_allocated_stop_to(std::string* stop_to) {
  if (stop_to != nullptr) {
    
  } else {
    
  }
  stop_to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_to,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.DistanceBetweenStops.stop_to)
}

// int32 distance = 3;
inline void DistanceBetweenStops::clear_distance() {
  distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistanceBetweenStops::_internal_distance() const {
  return distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DistanceBetweenStops::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DistanceBetweenStops.distance)
  return _internal_distance();
}
inline void DistanceBetweenStops::_internal_set_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  distance_ = value;
}
inline void DistanceBetweenStops::set_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.DistanceBetweenStops.distance)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .transport_catalogue_proto.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  stops_.Clear();
}
inline ::transport_catalogue_proto::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.stops)
  return &stops_;
}
inline const ::transport_catalogue_proto::Stop& TransportCatalogue::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::transport_catalogue_proto::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_proto::Stop* TransportCatalogue::_internal_add_stops() {
  return stops_.Add();
}
inline ::transport_catalogue_proto::Stop* TransportCatalogue::add_stops() {
  ::transport_catalogue_proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.stops)
  return stops_;
}

// repeated .transport_catalogue_proto.Bus buses = 2;
inline int TransportCatalogue::_internal_buses_size() const {
  return buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  buses_.Clear();
}
inline ::transport_catalogue_proto::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.buses)
  return &buses_;
}
inline const ::transport_catalogue_proto::Bus& TransportCatalogue::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::transport_catalogue_proto::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::transport_catalogue_proto::Bus* TransportCatalogue::_internal_add_buses() {
  return buses_.Add();
}
inline ::transport_catalogue_proto::Bus* TransportCatalogue::add_buses() {
  ::transport_catalogue_proto::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.buses)
  return buses_;
}

// repeated .transport_catalogue_proto.DistanceBetweenStops distances_between_stops = 3;
inline int TransportCatalogue::_internal_distances_between_stops_size() const {
  return distances_between_stops_.size();
}
inline int TransportCatalogue::distances_between_stops_size() const {
  return _internal_distances_between_stops_size();
}
inline void TransportCatalogue::clear_distances_between_stops() {
  distances_between_stops_.Clear();
}
inline ::transport_catalogue_proto::DistanceBetweenStops* TransportCatalogue::mutable_distances_between_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.distances_between_stops)
  return distances_between_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >*
TransportCatalogue::mutable_distances_between_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.distances_between_stops)
  return &distances_between_stops_;
}
inline const ::transport_catalogue_proto::DistanceBetweenStops& TransportCatalogue::_internal_distances_between_stops(int index) const {
  return distances_between_stops_.Get(index);
}
inline const ::transport_catalogue_proto::DistanceBetweenStops& TransportCatalogue::distances_between_stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.distances_between_stops)
  return _internal_distances_between_stops(index);
}
inline ::transport_catalogue_proto::DistanceBetweenStops* TransportCatalogue::_internal_add_distances_between_stops() {
  return distances_between_stops_.Add();
}
inline ::transport_catalogue_proto::DistanceBetweenStops* TransportCatalogue::add_distances_between_stops() {
  ::transport_catalogue_proto::DistanceBetweenStops* _add = _internal_add_distances_between_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.distances_between_stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >&
TransportCatalogue::distances_between_stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.distances_between_stops)
  return distances_between_stops_;
}

// repeated string stops_for_map = 4;
inline int TransportCatalogue::_internal_stops_for_map_size() const {
  return stops_for_map_.size();
}
inline int TransportCatalogue::stops_for_map_size() const {
  return _internal_stops_for_map_size();
}
inline void TransportCatalogue::clear_stops_for_map() {
  stops_for_map_.Clear();
}
inline std::string* TransportCatalogue::add_stops_for_map() {
  std::string* _s = _internal_add_stops_for_map();
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_proto.TransportCatalogue.stops_for_map)
  return _s;
}
inline const std::string& TransportCatalogue::_internal_stops_for_map(int index) const {
  return stops_for_map_.Get(index);
}
inline const std::string& TransportCatalogue::stops_for_map(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.stops_for_map)
  return _internal_stops_for_map(index);
}
inline std::string* TransportCatalogue::mutable_stops_for_map(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.stops_for_map)
  return stops_for_map_.Mutable(index);
}
inline void TransportCatalogue::set_stops_for_map(int index, const std::string& value) {
  stops_for_map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline void TransportCatalogue::set_stops_for_map(int index, std::string&& value) {
  stops_for_map_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline void TransportCatalogue::set_stops_for_map(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_for_map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline void TransportCatalogue::set_stops_for_map(int index, const char* value, size_t size) {
  stops_for_map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline std::string* TransportCatalogue::_internal_add_stops_for_map() {
  return stops_for_map_.Add();
}
inline void TransportCatalogue::add_stops_for_map(const std::string& value) {
  stops_for_map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline void TransportCatalogue::add_stops_for_map(std::string&& value) {
  stops_for_map_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline void TransportCatalogue::add_stops_for_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stops_for_map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline void TransportCatalogue::add_stops_for_map(const char* value, size_t size) {
  stops_for_map_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_proto.TransportCatalogue.stops_for_map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransportCatalogue::stops_for_map() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.stops_for_map)
  return stops_for_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransportCatalogue::mutable_stops_for_map() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.stops_for_map)
  return &stops_for_map_;
}

// repeated string buses_for_map = 5;
inline int TransportCatalogue::_internal_buses_for_map_size() const {
  return buses_for_map_.size();
}
inline int TransportCatalogue::buses_for_map_size() const {
  return _internal_buses_for_map_size();
}
inline void TransportCatalogue::clear_buses_for_map() {
  buses_for_map_.Clear();
}
inline std::string* TransportCatalogue::add_buses_for_map() {
  std::string* _s = _internal_add_buses_for_map();
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_proto.TransportCatalogue.buses_for_map)
  return _s;
}
inline const std::string& TransportCatalogue::_internal_buses_for_map(int index) const {
  return buses_for_map_.Get(index);
}
inline const std::string& TransportCatalogue::buses_for_map(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.buses_for_map)
  return _internal_buses_for_map(index);
}
inline std::string* TransportCatalogue::mutable_buses_for_map(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.buses_for_map)
  return buses_for_map_.Mutable(index);
}
inline void TransportCatalogue::set_buses_for_map(int index, const std::string& value) {
  buses_for_map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline void TransportCatalogue::set_buses_for_map(int index, std::string&& value) {
  buses_for_map_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline void TransportCatalogue::set_buses_for_map(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buses_for_map_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline void TransportCatalogue::set_buses_for_map(int index, const char* value, size_t size) {
  buses_for_map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline std::string* TransportCatalogue::_internal_add_buses_for_map() {
  return buses_for_map_.Add();
}
inline void TransportCatalogue::add_buses_for_map(const std::string& value) {
  buses_for_map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline void TransportCatalogue::add_buses_for_map(std::string&& value) {
  buses_for_map_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline void TransportCatalogue::add_buses_for_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buses_for_map_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline void TransportCatalogue::add_buses_for_map(const char* value, size_t size) {
  buses_for_map_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_proto.TransportCatalogue.buses_for_map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransportCatalogue::buses_for_map() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.buses_for_map)
  return buses_for_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransportCatalogue::mutable_buses_for_map() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.buses_for_map)
  return &buses_for_map_;
}

// .transport_catalogue_proto.RenderSettings render_settings = 6;
inline bool TransportCatalogue::_internal_has_render_settings() const {
  return this != internal_default_instance() && render_settings_ != nullptr;
}
inline bool TransportCatalogue::has_render_settings() const {
  return _internal_has_render_settings();
}
inline const ::transport_catalogue_proto::RenderSettings& TransportCatalogue::_internal_render_settings() const {
  const ::transport_catalogue_proto::RenderSettings* p = render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::RenderSettings&>(
      ::transport_catalogue_proto::_RenderSettings_default_instance_);
}
inline const ::transport_catalogue_proto::RenderSettings& TransportCatalogue::render_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.render_settings)
  return _internal_render_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_settings(
    ::transport_catalogue_proto::RenderSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.render_settings)
}
inline ::transport_catalogue_proto::RenderSettings* TransportCatalogue::release_render_settings() {
  
  ::transport_catalogue_proto::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::RenderSettings* TransportCatalogue::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.render_settings)
  
  ::transport_catalogue_proto::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::RenderSettings* TransportCatalogue::_internal_mutable_render_settings() {
  
  if (render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::RenderSettings>(GetArenaForAllocation());
    render_settings_ = p;
  }
  return render_settings_;
}
inline ::transport_catalogue_proto::RenderSettings* TransportCatalogue::mutable_render_settings() {
  ::transport_catalogue_proto::RenderSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.render_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_settings(::transport_catalogue_proto::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings));
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.render_settings)
}

// .transport_catalogue_proto.TransportRouter router = 7;
inline bool TransportCatalogue::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalogue::has_router() const {
  return _internal_has_router();
}
inline const ::transport_catalogue_proto::TransportRouter& TransportCatalogue::_internal_router() const {
  const ::transport_catalogue_proto::TransportRouter* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::TransportRouter&>(
      ::transport_catalogue_proto::_TransportRouter_default_instance_);
}
inline const ::transport_catalogue_proto::TransportRouter& TransportCatalogue::router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.router)
  return _internal_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router(
    ::transport_catalogue_proto::TransportRouter* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.router)
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::release_router() {
  
  ::transport_catalogue_proto::TransportRouter* temp = router_;
  router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.router)
  
  ::transport_catalogue_proto::TransportRouter* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::TransportRouter>(GetArenaForAllocation());
    router_ = p;
  }
  return router_;
}
inline ::transport_catalogue_proto::TransportRouter* TransportCatalogue::mutable_router() {
  ::transport_catalogue_proto::TransportRouter* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.router)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router(::transport_catalogue_proto::TransportRouter* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
