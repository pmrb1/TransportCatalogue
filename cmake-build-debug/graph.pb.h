// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace transport_catalogue_proto {
class DirectedWeightedGraph;
struct DirectedWeightedGraphDefaultTypeInternal;
extern DirectedWeightedGraphDefaultTypeInternal _DirectedWeightedGraph_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class IncidenceList;
struct IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_proto::DirectedWeightedGraph* Arena::CreateMaybeMessage<::transport_catalogue_proto::DirectedWeightedGraph>(Arena*);
template<> ::transport_catalogue_proto::Edge* Arena::CreateMaybeMessage<::transport_catalogue_proto::Edge>(Arena*);
template<> ::transport_catalogue_proto::IncidenceList* Arena::CreateMaybeMessage<::transport_catalogue_proto::IncidenceList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_proto {

// ===================================================================

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit constexpr Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return new Edge();
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Edge& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  ~IncidenceList() override;
  explicit constexpr IncidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidenceList* New() const final {
    return new IncidenceList();
  }

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IncidenceList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdsFieldNumber = 1,
  };
  // repeated uint32 edge_ids = 1;
  int edge_ids_size() const;
  private:
  int _internal_edge_ids_size() const;
  public:
  void clear_edge_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_ids() const;
  void _internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_ids(int index) const;
  void set_edge_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_ids();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_ids_;
  mutable std::atomic<int> _edge_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class DirectedWeightedGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.DirectedWeightedGraph) */ {
 public:
  inline DirectedWeightedGraph() : DirectedWeightedGraph(nullptr) {}
  ~DirectedWeightedGraph() override;
  explicit constexpr DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectedWeightedGraph(const DirectedWeightedGraph& from);
  DirectedWeightedGraph(DirectedWeightedGraph&& from) noexcept
    : DirectedWeightedGraph() {
    *this = ::std::move(from);
  }

  inline DirectedWeightedGraph& operator=(const DirectedWeightedGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectedWeightedGraph& operator=(DirectedWeightedGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DirectedWeightedGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectedWeightedGraph* internal_default_instance() {
    return reinterpret_cast<const DirectedWeightedGraph*>(
               &_DirectedWeightedGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DirectedWeightedGraph& a, DirectedWeightedGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectedWeightedGraph* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectedWeightedGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectedWeightedGraph* New() const final {
    return new DirectedWeightedGraph();
  }

  DirectedWeightedGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectedWeightedGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DirectedWeightedGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DirectedWeightedGraph& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectedWeightedGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.DirectedWeightedGraph";
  }
  protected:
  explicit DirectedWeightedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListsFieldNumber = 2,
  };
  // repeated .transport_catalogue_proto.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::transport_catalogue_proto::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Edge >*
      mutable_edges();
  private:
  const ::transport_catalogue_proto::Edge& _internal_edges(int index) const;
  ::transport_catalogue_proto::Edge* _internal_add_edges();
  public:
  const ::transport_catalogue_proto::Edge& edges(int index) const;
  ::transport_catalogue_proto::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Edge >&
      edges() const;

  // repeated .transport_catalogue_proto.IncidenceList incidence_lists = 2;
  int incidence_lists_size() const;
  private:
  int _internal_incidence_lists_size() const;
  public:
  void clear_incidence_lists();
  ::transport_catalogue_proto::IncidenceList* mutable_incidence_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::IncidenceList >*
      mutable_incidence_lists();
  private:
  const ::transport_catalogue_proto::IncidenceList& _internal_incidence_lists(int index) const;
  ::transport_catalogue_proto::IncidenceList* _internal_add_incidence_lists();
  public:
  const ::transport_catalogue_proto::IncidenceList& incidence_lists(int index) const;
  ::transport_catalogue_proto::IncidenceList* add_incidence_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::IncidenceList >&
      incidence_lists() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.DirectedWeightedGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Edge > edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::IncidenceList > incidence_lists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::from() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_ = value;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Edge.weight)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 edge_ids = 1;
inline int IncidenceList::_internal_edge_ids_size() const {
  return edge_ids_.size();
}
inline int IncidenceList::edge_ids_size() const {
  return _internal_edge_ids_size();
}
inline void IncidenceList::clear_edge_ids() {
  edge_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::_internal_edge_ids(int index) const {
  return edge_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IncidenceList::edge_ids(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.IncidenceList.edge_ids)
  return _internal_edge_ids(index);
}
inline void IncidenceList::set_edge_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.IncidenceList.edge_ids)
}
inline void IncidenceList::_internal_add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_ids_.Add(value);
}
inline void IncidenceList::add_edge_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_ids(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.IncidenceList.edge_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::_internal_edge_ids() const {
  return edge_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
IncidenceList::edge_ids() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.IncidenceList.edge_ids)
  return _internal_edge_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::_internal_mutable_edge_ids() {
  return &edge_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
IncidenceList::mutable_edge_ids() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.IncidenceList.edge_ids)
  return _internal_mutable_edge_ids();
}

// -------------------------------------------------------------------

// DirectedWeightedGraph

// repeated .transport_catalogue_proto.Edge edges = 1;
inline int DirectedWeightedGraph::_internal_edges_size() const {
  return edges_.size();
}
inline int DirectedWeightedGraph::edges_size() const {
  return _internal_edges_size();
}
inline void DirectedWeightedGraph::clear_edges() {
  edges_.Clear();
}
inline ::transport_catalogue_proto::Edge* DirectedWeightedGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.DirectedWeightedGraph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Edge >*
DirectedWeightedGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.DirectedWeightedGraph.edges)
  return &edges_;
}
inline const ::transport_catalogue_proto::Edge& DirectedWeightedGraph::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::transport_catalogue_proto::Edge& DirectedWeightedGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DirectedWeightedGraph.edges)
  return _internal_edges(index);
}
inline ::transport_catalogue_proto::Edge* DirectedWeightedGraph::_internal_add_edges() {
  return edges_.Add();
}
inline ::transport_catalogue_proto::Edge* DirectedWeightedGraph::add_edges() {
  ::transport_catalogue_proto::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.DirectedWeightedGraph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Edge >&
DirectedWeightedGraph::edges() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.DirectedWeightedGraph.edges)
  return edges_;
}

// repeated .transport_catalogue_proto.IncidenceList incidence_lists = 2;
inline int DirectedWeightedGraph::_internal_incidence_lists_size() const {
  return incidence_lists_.size();
}
inline int DirectedWeightedGraph::incidence_lists_size() const {
  return _internal_incidence_lists_size();
}
inline void DirectedWeightedGraph::clear_incidence_lists() {
  incidence_lists_.Clear();
}
inline ::transport_catalogue_proto::IncidenceList* DirectedWeightedGraph::mutable_incidence_lists(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.DirectedWeightedGraph.incidence_lists)
  return incidence_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::IncidenceList >*
DirectedWeightedGraph::mutable_incidence_lists() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.DirectedWeightedGraph.incidence_lists)
  return &incidence_lists_;
}
inline const ::transport_catalogue_proto::IncidenceList& DirectedWeightedGraph::_internal_incidence_lists(int index) const {
  return incidence_lists_.Get(index);
}
inline const ::transport_catalogue_proto::IncidenceList& DirectedWeightedGraph::incidence_lists(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DirectedWeightedGraph.incidence_lists)
  return _internal_incidence_lists(index);
}
inline ::transport_catalogue_proto::IncidenceList* DirectedWeightedGraph::_internal_add_incidence_lists() {
  return incidence_lists_.Add();
}
inline ::transport_catalogue_proto::IncidenceList* DirectedWeightedGraph::add_incidence_lists() {
  ::transport_catalogue_proto::IncidenceList* _add = _internal_add_incidence_lists();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.DirectedWeightedGraph.incidence_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::IncidenceList >&
DirectedWeightedGraph::incidence_lists() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.DirectedWeightedGraph.incidence_lists)
  return incidence_lists_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
