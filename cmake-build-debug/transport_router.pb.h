// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace transport_catalogue_proto {
class BusEdgeInfo;
struct BusEdgeInfoDefaultTypeInternal;
extern BusEdgeInfoDefaultTypeInternal _BusEdgeInfo_default_instance_;
class EdgeInfo;
struct EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesInternalDataByTarget;
struct RoutesInternalDataByTargetDefaultTypeInternal;
extern RoutesInternalDataByTargetDefaultTypeInternal _RoutesInternalDataByTarget_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class StopVertexIds;
struct StopVertexIdsDefaultTypeInternal;
extern StopVertexIdsDefaultTypeInternal _StopVertexIds_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
class VertexInfo;
struct VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
class WaitEdgeInfo;
struct WaitEdgeInfoDefaultTypeInternal;
extern WaitEdgeInfoDefaultTypeInternal _WaitEdgeInfo_default_instance_;
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_proto::BusEdgeInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::BusEdgeInfo>(Arena*);
template<> ::transport_catalogue_proto::EdgeInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::EdgeInfo>(Arena*);
template<> ::transport_catalogue_proto::RouteInternalData* Arena::CreateMaybeMessage<::transport_catalogue_proto::RouteInternalData>(Arena*);
template<> ::transport_catalogue_proto::Router* Arena::CreateMaybeMessage<::transport_catalogue_proto::Router>(Arena*);
template<> ::transport_catalogue_proto::RoutesInternalDataByTarget* Arena::CreateMaybeMessage<::transport_catalogue_proto::RoutesInternalDataByTarget>(Arena*);
template<> ::transport_catalogue_proto::RoutingSettings* Arena::CreateMaybeMessage<::transport_catalogue_proto::RoutingSettings>(Arena*);
template<> ::transport_catalogue_proto::StopVertexIds* Arena::CreateMaybeMessage<::transport_catalogue_proto::StopVertexIds>(Arena*);
template<> ::transport_catalogue_proto::TransportRouter* Arena::CreateMaybeMessage<::transport_catalogue_proto::TransportRouter>(Arena*);
template<> ::transport_catalogue_proto::VertexInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::VertexInfo>(Arena*);
template<> ::transport_catalogue_proto::WaitEdgeInfo* Arena::CreateMaybeMessage<::transport_catalogue_proto::WaitEdgeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_proto {

// ===================================================================

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit constexpr RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingSettings* New() const final {
    return new RoutingSettings();
  }

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutingSettings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // int32 bus_wait_time = 1;
  void clear_bus_wait_time();
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time() const;
  void set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double bus_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 bus_wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopVertexIds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.StopVertexIds) */ {
 public:
  inline StopVertexIds() : StopVertexIds(nullptr) {}
  ~StopVertexIds() override;
  explicit constexpr StopVertexIds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVertexIds(const StopVertexIds& from);
  StopVertexIds(StopVertexIds&& from) noexcept
    : StopVertexIds() {
    *this = ::std::move(from);
  }

  inline StopVertexIds& operator=(const StopVertexIds& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVertexIds& operator=(StopVertexIds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopVertexIds& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVertexIds* internal_default_instance() {
    return reinterpret_cast<const StopVertexIds*>(
               &_StopVertexIds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopVertexIds& a, StopVertexIds& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVertexIds* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVertexIds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVertexIds* New() const final {
    return new StopVertexIds();
  }

  StopVertexIds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVertexIds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopVertexIds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopVertexIds& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVertexIds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.StopVertexIds";
  }
  protected:
  explicit StopVertexIds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInFieldNumber = 2,
    kOutFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 in = 2;
  void clear_in();
  ::PROTOBUF_NAMESPACE_ID::uint32 in() const;
  void set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_in() const;
  void _internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 out = 3;
  void clear_out();
  ::PROTOBUF_NAMESPACE_ID::uint32 out() const;
  void set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_out() const;
  void _internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.StopVertexIds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.VertexInfo) */ {
 public:
  inline VertexInfo() : VertexInfo(nullptr) {}
  ~VertexInfo() override;
  explicit constexpr VertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VertexInfo* New() const final {
    return new VertexInfo();
  }

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VertexInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.VertexInfo";
  }
  protected:
  explicit VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
  };
  // string stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.VertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class BusEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.BusEdgeInfo) */ {
 public:
  inline BusEdgeInfo() : BusEdgeInfo(nullptr) {}
  ~BusEdgeInfo() override;
  explicit constexpr BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusEdgeInfo(const BusEdgeInfo& from);
  BusEdgeInfo(BusEdgeInfo&& from) noexcept
    : BusEdgeInfo() {
    *this = ::std::move(from);
  }

  inline BusEdgeInfo& operator=(const BusEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusEdgeInfo& operator=(BusEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const BusEdgeInfo*>(
               &_BusEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BusEdgeInfo& a, BusEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BusEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BusEdgeInfo* New() const final {
    return new BusEdgeInfo();
  }

  BusEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BusEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BusEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.BusEdgeInfo";
  }
  protected:
  explicit BusEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kStartStopIdxFieldNumber = 2,
    kFinishStopIdxFieldNumber = 3,
  };
  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // uint32 start_stop_idx = 2;
  void clear_start_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_stop_idx() const;
  void set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_stop_idx() const;
  void _internal_set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 finish_stop_idx = 3;
  void clear_finish_stop_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_stop_idx() const;
  void set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_finish_stop_idx() const;
  void _internal_set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.BusEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_stop_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 finish_stop_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class WaitEdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.WaitEdgeInfo) */ {
 public:
  inline WaitEdgeInfo() : WaitEdgeInfo(nullptr) {}
  ~WaitEdgeInfo() override;
  explicit constexpr WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WaitEdgeInfo(const WaitEdgeInfo& from);
  WaitEdgeInfo(WaitEdgeInfo&& from) noexcept
    : WaitEdgeInfo() {
    *this = ::std::move(from);
  }

  inline WaitEdgeInfo& operator=(const WaitEdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaitEdgeInfo& operator=(WaitEdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WaitEdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WaitEdgeInfo* internal_default_instance() {
    return reinterpret_cast<const WaitEdgeInfo*>(
               &_WaitEdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WaitEdgeInfo& a, WaitEdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WaitEdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaitEdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaitEdgeInfo* New() const final {
    return new WaitEdgeInfo();
  }

  WaitEdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaitEdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WaitEdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WaitEdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaitEdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.WaitEdgeInfo";
  }
  protected:
  explicit WaitEdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.WaitEdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  ~EdgeInfo() override;
  explicit constexpr EdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kBusData = 1,
    kWaitData = 2,
    DATA_NOT_SET = 0,
  };

  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeInfo* New() const final {
    return new EdgeInfo();
  }

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EdgeInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusDataFieldNumber = 1,
    kWaitDataFieldNumber = 2,
  };
  // .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
  bool has_bus_data() const;
  private:
  bool _internal_has_bus_data() const;
  public:
  void clear_bus_data();
  const ::transport_catalogue_proto::BusEdgeInfo& bus_data() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::BusEdgeInfo* release_bus_data();
  ::transport_catalogue_proto::BusEdgeInfo* mutable_bus_data();
  void set_allocated_bus_data(::transport_catalogue_proto::BusEdgeInfo* bus_data);
  private:
  const ::transport_catalogue_proto::BusEdgeInfo& _internal_bus_data() const;
  ::transport_catalogue_proto::BusEdgeInfo* _internal_mutable_bus_data();
  public:
  void unsafe_arena_set_allocated_bus_data(
      ::transport_catalogue_proto::BusEdgeInfo* bus_data);
  ::transport_catalogue_proto::BusEdgeInfo* unsafe_arena_release_bus_data();

  // .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
  bool has_wait_data() const;
  private:
  bool _internal_has_wait_data() const;
  public:
  void clear_wait_data();
  const ::transport_catalogue_proto::WaitEdgeInfo& wait_data() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::WaitEdgeInfo* release_wait_data();
  ::transport_catalogue_proto::WaitEdgeInfo* mutable_wait_data();
  void set_allocated_wait_data(::transport_catalogue_proto::WaitEdgeInfo* wait_data);
  private:
  const ::transport_catalogue_proto::WaitEdgeInfo& _internal_wait_data() const;
  ::transport_catalogue_proto::WaitEdgeInfo* _internal_mutable_wait_data();
  public:
  void unsafe_arena_set_allocated_wait_data(
      ::transport_catalogue_proto::WaitEdgeInfo* wait_data);
  ::transport_catalogue_proto::WaitEdgeInfo* unsafe_arena_release_wait_data();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.EdgeInfo)
 private:
  class _Internal;
  void set_has_bus_data();
  void set_has_wait_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::transport_catalogue_proto::BusEdgeInfo* bus_data_;
    ::transport_catalogue_proto::WaitEdgeInfo* wait_data_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  ~RouteInternalData() override;
  explicit constexpr RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInternalData* New() const final {
    return new RouteInternalData();
  }

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RouteInternalData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 2,
    kExistsFieldNumber = 1,
    kHasPrevEdgeFieldNumber = 3,
    kPrevEdgeFieldNumber = 4,
  };
  // double weight = 2;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // bool exists = 1;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // bool has_prev_edge = 3;
  void clear_has_prev_edge();
  bool has_prev_edge() const;
  void set_has_prev_edge(bool value);
  private:
  bool _internal_has_prev_edge() const;
  void _internal_set_has_prev_edge(bool value);
  public:

  // uint32 prev_edge = 4;
  void clear_prev_edge();
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_edge() const;
  void set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prev_edge() const;
  void _internal_set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.RouteInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_;
  bool exists_;
  bool has_prev_edge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prev_edge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalDataByTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.RoutesInternalDataByTarget) */ {
 public:
  inline RoutesInternalDataByTarget() : RoutesInternalDataByTarget(nullptr) {}
  ~RoutesInternalDataByTarget() override;
  explicit constexpr RoutesInternalDataByTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalDataByTarget(const RoutesInternalDataByTarget& from);
  RoutesInternalDataByTarget(RoutesInternalDataByTarget&& from) noexcept
    : RoutesInternalDataByTarget() {
    *this = ::std::move(from);
  }

  inline RoutesInternalDataByTarget& operator=(const RoutesInternalDataByTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalDataByTarget& operator=(RoutesInternalDataByTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalDataByTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalDataByTarget* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalDataByTarget*>(
               &_RoutesInternalDataByTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoutesInternalDataByTarget& a, RoutesInternalDataByTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalDataByTarget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalDataByTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutesInternalDataByTarget* New() const final {
    return new RoutesInternalDataByTarget();
  }

  RoutesInternalDataByTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutesInternalDataByTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalDataByTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RoutesInternalDataByTarget& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalDataByTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.RoutesInternalDataByTarget";
  }
  protected:
  explicit RoutesInternalDataByTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsDataFieldNumber = 1,
  };
  // repeated .transport_catalogue_proto.RouteInternalData targets_data = 1;
  int targets_data_size() const;
  private:
  int _internal_targets_data_size() const;
  public:
  void clear_targets_data();
  ::transport_catalogue_proto::RouteInternalData* mutable_targets_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RouteInternalData >*
      mutable_targets_data();
  private:
  const ::transport_catalogue_proto::RouteInternalData& _internal_targets_data(int index) const;
  ::transport_catalogue_proto::RouteInternalData* _internal_add_targets_data();
  public:
  const ::transport_catalogue_proto::RouteInternalData& targets_data(int index) const;
  ::transport_catalogue_proto::RouteInternalData* add_targets_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RouteInternalData >&
      targets_data() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.RoutesInternalDataByTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RouteInternalData > targets_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit constexpr Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Router* New() const final {
    return new Router();
  }

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Router& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesDataFieldNumber = 1,
  };
  // repeated .transport_catalogue_proto.RoutesInternalDataByTarget sources_data = 1;
  int sources_data_size() const;
  private:
  int _internal_sources_data_size() const;
  public:
  void clear_sources_data();
  ::transport_catalogue_proto::RoutesInternalDataByTarget* mutable_sources_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RoutesInternalDataByTarget >*
      mutable_sources_data();
  private:
  const ::transport_catalogue_proto::RoutesInternalDataByTarget& _internal_sources_data(int index) const;
  ::transport_catalogue_proto::RoutesInternalDataByTarget* _internal_add_sources_data();
  public:
  const ::transport_catalogue_proto::RoutesInternalDataByTarget& sources_data(int index) const;
  ::transport_catalogue_proto::RoutesInternalDataByTarget* add_sources_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RoutesInternalDataByTarget >&
      sources_data() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RoutesInternalDataByTarget > sources_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit constexpr TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportRouter* New() const final {
    return new TransportRouter();
  }

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransportRouter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsVertexIdsFieldNumber = 4,
    kVerticesInfoFieldNumber = 5,
    kEdgesInfoFieldNumber = 6,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 2,
    kRouterFieldNumber = 3,
  };
  // repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
  int stops_vertex_ids_size() const;
  private:
  int _internal_stops_vertex_ids_size() const;
  public:
  void clear_stops_vertex_ids();
  ::transport_catalogue_proto::StopVertexIds* mutable_stops_vertex_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >*
      mutable_stops_vertex_ids();
  private:
  const ::transport_catalogue_proto::StopVertexIds& _internal_stops_vertex_ids(int index) const;
  ::transport_catalogue_proto::StopVertexIds* _internal_add_stops_vertex_ids();
  public:
  const ::transport_catalogue_proto::StopVertexIds& stops_vertex_ids(int index) const;
  ::transport_catalogue_proto::StopVertexIds* add_stops_vertex_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >&
      stops_vertex_ids() const;

  // repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
  int vertices_info_size() const;
  private:
  int _internal_vertices_info_size() const;
  public:
  void clear_vertices_info();
  ::transport_catalogue_proto::VertexInfo* mutable_vertices_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >*
      mutable_vertices_info();
  private:
  const ::transport_catalogue_proto::VertexInfo& _internal_vertices_info(int index) const;
  ::transport_catalogue_proto::VertexInfo* _internal_add_vertices_info();
  public:
  const ::transport_catalogue_proto::VertexInfo& vertices_info(int index) const;
  ::transport_catalogue_proto::VertexInfo* add_vertices_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >&
      vertices_info() const;

  // repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
  int edges_info_size() const;
  private:
  int _internal_edges_info_size() const;
  public:
  void clear_edges_info();
  ::transport_catalogue_proto::EdgeInfo* mutable_edges_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >*
      mutable_edges_info();
  private:
  const ::transport_catalogue_proto::EdgeInfo& _internal_edges_info(int index) const;
  ::transport_catalogue_proto::EdgeInfo* _internal_add_edges_info();
  public:
  const ::transport_catalogue_proto::EdgeInfo& edges_info(int index) const;
  ::transport_catalogue_proto::EdgeInfo* add_edges_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >&
      edges_info() const;

  // .transport_catalogue_proto.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::transport_catalogue_proto::RoutingSettings& routing_settings() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::RoutingSettings* release_routing_settings();
  ::transport_catalogue_proto::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::transport_catalogue_proto::RoutingSettings* routing_settings);
  private:
  const ::transport_catalogue_proto::RoutingSettings& _internal_routing_settings() const;
  ::transport_catalogue_proto::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::transport_catalogue_proto::RoutingSettings* routing_settings);
  ::transport_catalogue_proto::RoutingSettings* unsafe_arena_release_routing_settings();

  // .transport_catalogue_proto.DirectedWeightedGraph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::transport_catalogue_proto::DirectedWeightedGraph& graph() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::DirectedWeightedGraph* release_graph();
  ::transport_catalogue_proto::DirectedWeightedGraph* mutable_graph();
  void set_allocated_graph(::transport_catalogue_proto::DirectedWeightedGraph* graph);
  private:
  const ::transport_catalogue_proto::DirectedWeightedGraph& _internal_graph() const;
  ::transport_catalogue_proto::DirectedWeightedGraph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::transport_catalogue_proto::DirectedWeightedGraph* graph);
  ::transport_catalogue_proto::DirectedWeightedGraph* unsafe_arena_release_graph();

  // .transport_catalogue_proto.Router router = 3;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::transport_catalogue_proto::Router& router() const;
  PROTOBUF_MUST_USE_RESULT ::transport_catalogue_proto::Router* release_router();
  ::transport_catalogue_proto::Router* mutable_router();
  void set_allocated_router(::transport_catalogue_proto::Router* router);
  private:
  const ::transport_catalogue_proto::Router& _internal_router() const;
  ::transport_catalogue_proto::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::transport_catalogue_proto::Router* router);
  ::transport_catalogue_proto::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds > stops_vertex_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo > vertices_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo > edges_info_;
  ::transport_catalogue_proto::RoutingSettings* routing_settings_;
  ::transport_catalogue_proto::DirectedWeightedGraph* graph_;
  ::transport_catalogue_proto::Router* router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// int32 bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  bus_wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::_internal_bus_wait_time() const {
  return bus_wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// StopVertexIds

// string name = 1;
inline void StopVertexIds::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopVertexIds::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopVertexIds.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopVertexIds::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopVertexIds.name)
}
inline std::string* StopVertexIds::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.StopVertexIds.name)
  return _s;
}
inline const std::string& StopVertexIds::_internal_name() const {
  return name_.Get();
}
inline void StopVertexIds::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StopVertexIds::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StopVertexIds::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.StopVertexIds.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StopVertexIds::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.StopVertexIds.name)
}

// uint32 in = 2;
inline void StopVertexIds::clear_in() {
  in_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::_internal_in() const {
  return in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::in() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopVertexIds.in)
  return _internal_in();
}
inline void StopVertexIds::_internal_set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  in_ = value;
}
inline void StopVertexIds::set_in(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_in(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopVertexIds.in)
}

// uint32 out = 3;
inline void StopVertexIds::clear_out() {
  out_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::_internal_out() const {
  return out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopVertexIds::out() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.StopVertexIds.out)
  return _internal_out();
}
inline void StopVertexIds::_internal_set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  out_ = value;
}
inline void StopVertexIds::set_out(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_out(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.StopVertexIds.out)
}

// -------------------------------------------------------------------

// VertexInfo

// string stop_name = 1;
inline void VertexInfo::clear_stop_name() {
  stop_name_.ClearToEmpty();
}
inline const std::string& VertexInfo::stop_name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.VertexInfo.stop_name)
  return _internal_stop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VertexInfo::set_stop_name(ArgT0&& arg0, ArgT... args) {
 
 stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.VertexInfo.stop_name)
}
inline std::string* VertexInfo::mutable_stop_name() {
  std::string* _s = _internal_mutable_stop_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.VertexInfo.stop_name)
  return _s;
}
inline const std::string& VertexInfo::_internal_stop_name() const {
  return stop_name_.Get();
}
inline void VertexInfo::_internal_set_stop_name(const std::string& value) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VertexInfo::_internal_mutable_stop_name() {
  
  return stop_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VertexInfo::release_stop_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.VertexInfo.stop_name)
  return stop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VertexInfo::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  stop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.VertexInfo.stop_name)
}

// -------------------------------------------------------------------

// BusEdgeInfo

// string bus_name = 1;
inline void BusEdgeInfo::clear_bus_name() {
  bus_name_.ClearToEmpty();
}
inline const std::string& BusEdgeInfo::bus_name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.BusEdgeInfo.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusEdgeInfo::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.BusEdgeInfo.bus_name)
}
inline std::string* BusEdgeInfo::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.BusEdgeInfo.bus_name)
  return _s;
}
inline const std::string& BusEdgeInfo::_internal_bus_name() const {
  return bus_name_.Get();
}
inline void BusEdgeInfo::_internal_set_bus_name(const std::string& value) {
  
  bus_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BusEdgeInfo::_internal_mutable_bus_name() {
  
  return bus_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BusEdgeInfo::release_bus_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.BusEdgeInfo.bus_name)
  return bus_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BusEdgeInfo::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  bus_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bus_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.BusEdgeInfo.bus_name)
}

// uint32 start_stop_idx = 2;
inline void BusEdgeInfo::clear_start_stop_idx() {
  start_stop_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_start_stop_idx() const {
  return start_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::start_stop_idx() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.BusEdgeInfo.start_stop_idx)
  return _internal_start_stop_idx();
}
inline void BusEdgeInfo::_internal_set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  start_stop_idx_ = value;
}
inline void BusEdgeInfo::set_start_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_stop_idx(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.BusEdgeInfo.start_stop_idx)
}

// uint32 finish_stop_idx = 3;
inline void BusEdgeInfo::clear_finish_stop_idx() {
  finish_stop_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::_internal_finish_stop_idx() const {
  return finish_stop_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BusEdgeInfo::finish_stop_idx() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.BusEdgeInfo.finish_stop_idx)
  return _internal_finish_stop_idx();
}
inline void BusEdgeInfo::_internal_set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  finish_stop_idx_ = value;
}
inline void BusEdgeInfo::set_finish_stop_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_finish_stop_idx(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.BusEdgeInfo.finish_stop_idx)
}

// -------------------------------------------------------------------

// WaitEdgeInfo

// -------------------------------------------------------------------

// EdgeInfo

// .transport_catalogue_proto.BusEdgeInfo bus_data = 1;
inline bool EdgeInfo::_internal_has_bus_data() const {
  return data_case() == kBusData;
}
inline bool EdgeInfo::has_bus_data() const {
  return _internal_has_bus_data();
}
inline void EdgeInfo::set_has_bus_data() {
  _oneof_case_[0] = kBusData;
}
inline void EdgeInfo::clear_bus_data() {
  if (_internal_has_bus_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bus_data_;
    }
    clear_has_data();
  }
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::release_bus_data() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.EdgeInfo.bus_data)
  if (_internal_has_bus_data()) {
    clear_has_data();
      ::transport_catalogue_proto::BusEdgeInfo* temp = data_.bus_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.bus_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transport_catalogue_proto::BusEdgeInfo& EdgeInfo::_internal_bus_data() const {
  return _internal_has_bus_data()
      ? *data_.bus_data_
      : reinterpret_cast< ::transport_catalogue_proto::BusEdgeInfo&>(::transport_catalogue_proto::_BusEdgeInfo_default_instance_);
}
inline const ::transport_catalogue_proto::BusEdgeInfo& EdgeInfo::bus_data() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.EdgeInfo.bus_data)
  return _internal_bus_data();
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::unsafe_arena_release_bus_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_proto.EdgeInfo.bus_data)
  if (_internal_has_bus_data()) {
    clear_has_data();
    ::transport_catalogue_proto::BusEdgeInfo* temp = data_.bus_data_;
    data_.bus_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_bus_data(::transport_catalogue_proto::BusEdgeInfo* bus_data) {
  clear_data();
  if (bus_data) {
    set_has_bus_data();
    data_.bus_data_ = bus_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.EdgeInfo.bus_data)
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::_internal_mutable_bus_data() {
  if (!_internal_has_bus_data()) {
    clear_data();
    set_has_bus_data();
    data_.bus_data_ = CreateMaybeMessage< ::transport_catalogue_proto::BusEdgeInfo >(GetArenaForAllocation());
  }
  return data_.bus_data_;
}
inline ::transport_catalogue_proto::BusEdgeInfo* EdgeInfo::mutable_bus_data() {
  ::transport_catalogue_proto::BusEdgeInfo* _msg = _internal_mutable_bus_data();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.EdgeInfo.bus_data)
  return _msg;
}

// .transport_catalogue_proto.WaitEdgeInfo wait_data = 2;
inline bool EdgeInfo::_internal_has_wait_data() const {
  return data_case() == kWaitData;
}
inline bool EdgeInfo::has_wait_data() const {
  return _internal_has_wait_data();
}
inline void EdgeInfo::set_has_wait_data() {
  _oneof_case_[0] = kWaitData;
}
inline void EdgeInfo::clear_wait_data() {
  if (_internal_has_wait_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.wait_data_;
    }
    clear_has_data();
  }
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::release_wait_data() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.EdgeInfo.wait_data)
  if (_internal_has_wait_data()) {
    clear_has_data();
      ::transport_catalogue_proto::WaitEdgeInfo* temp = data_.wait_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.wait_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::transport_catalogue_proto::WaitEdgeInfo& EdgeInfo::_internal_wait_data() const {
  return _internal_has_wait_data()
      ? *data_.wait_data_
      : reinterpret_cast< ::transport_catalogue_proto::WaitEdgeInfo&>(::transport_catalogue_proto::_WaitEdgeInfo_default_instance_);
}
inline const ::transport_catalogue_proto::WaitEdgeInfo& EdgeInfo::wait_data() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.EdgeInfo.wait_data)
  return _internal_wait_data();
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::unsafe_arena_release_wait_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transport_catalogue_proto.EdgeInfo.wait_data)
  if (_internal_has_wait_data()) {
    clear_has_data();
    ::transport_catalogue_proto::WaitEdgeInfo* temp = data_.wait_data_;
    data_.wait_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EdgeInfo::unsafe_arena_set_allocated_wait_data(::transport_catalogue_proto::WaitEdgeInfo* wait_data) {
  clear_data();
  if (wait_data) {
    set_has_wait_data();
    data_.wait_data_ = wait_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.EdgeInfo.wait_data)
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::_internal_mutable_wait_data() {
  if (!_internal_has_wait_data()) {
    clear_data();
    set_has_wait_data();
    data_.wait_data_ = CreateMaybeMessage< ::transport_catalogue_proto::WaitEdgeInfo >(GetArenaForAllocation());
  }
  return data_.wait_data_;
}
inline ::transport_catalogue_proto::WaitEdgeInfo* EdgeInfo::mutable_wait_data() {
  ::transport_catalogue_proto::WaitEdgeInfo* _msg = _internal_mutable_wait_data();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.EdgeInfo.wait_data)
  return _msg;
}

inline bool EdgeInfo::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void EdgeInfo::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline EdgeInfo::DataCase EdgeInfo::data_case() const {
  return EdgeInfo::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RouteInternalData

// bool exists = 1;
inline void RouteInternalData::clear_exists() {
  exists_ = false;
}
inline bool RouteInternalData::_internal_exists() const {
  return exists_;
}
inline bool RouteInternalData::exists() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RouteInternalData.exists)
  return _internal_exists();
}
inline void RouteInternalData::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void RouteInternalData::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RouteInternalData.exists)
}

// double weight = 2;
inline void RouteInternalData::clear_weight() {
  weight_ = 0;
}
inline double RouteInternalData::_internal_weight() const {
  return weight_;
}
inline double RouteInternalData::weight() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RouteInternalData.weight)
  return _internal_weight();
}
inline void RouteInternalData::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void RouteInternalData::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RouteInternalData.weight)
}

// bool has_prev_edge = 3;
inline void RouteInternalData::clear_has_prev_edge() {
  has_prev_edge_ = false;
}
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return has_prev_edge_;
}
inline bool RouteInternalData::has_prev_edge() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RouteInternalData.has_prev_edge)
  return _internal_has_prev_edge();
}
inline void RouteInternalData::_internal_set_has_prev_edge(bool value) {
  
  has_prev_edge_ = value;
}
inline void RouteInternalData::set_has_prev_edge(bool value) {
  _internal_set_has_prev_edge(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RouteInternalData.has_prev_edge)
}

// uint32 prev_edge = 4;
inline void RouteInternalData::clear_prev_edge() {
  prev_edge_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteInternalData::_internal_prev_edge() const {
  return prev_edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteInternalData::prev_edge() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RouteInternalData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteInternalData::_internal_set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prev_edge_ = value;
}
inline void RouteInternalData::set_prev_edge(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.RouteInternalData.prev_edge)
}

// -------------------------------------------------------------------

// RoutesInternalDataByTarget

// repeated .transport_catalogue_proto.RouteInternalData targets_data = 1;
inline int RoutesInternalDataByTarget::_internal_targets_data_size() const {
  return targets_data_.size();
}
inline int RoutesInternalDataByTarget::targets_data_size() const {
  return _internal_targets_data_size();
}
inline void RoutesInternalDataByTarget::clear_targets_data() {
  targets_data_.Clear();
}
inline ::transport_catalogue_proto::RouteInternalData* RoutesInternalDataByTarget::mutable_targets_data(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.RoutesInternalDataByTarget.targets_data)
  return targets_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RouteInternalData >*
RoutesInternalDataByTarget::mutable_targets_data() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.RoutesInternalDataByTarget.targets_data)
  return &targets_data_;
}
inline const ::transport_catalogue_proto::RouteInternalData& RoutesInternalDataByTarget::_internal_targets_data(int index) const {
  return targets_data_.Get(index);
}
inline const ::transport_catalogue_proto::RouteInternalData& RoutesInternalDataByTarget::targets_data(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.RoutesInternalDataByTarget.targets_data)
  return _internal_targets_data(index);
}
inline ::transport_catalogue_proto::RouteInternalData* RoutesInternalDataByTarget::_internal_add_targets_data() {
  return targets_data_.Add();
}
inline ::transport_catalogue_proto::RouteInternalData* RoutesInternalDataByTarget::add_targets_data() {
  ::transport_catalogue_proto::RouteInternalData* _add = _internal_add_targets_data();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.RoutesInternalDataByTarget.targets_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RouteInternalData >&
RoutesInternalDataByTarget::targets_data() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.RoutesInternalDataByTarget.targets_data)
  return targets_data_;
}

// -------------------------------------------------------------------

// Router

// repeated .transport_catalogue_proto.RoutesInternalDataByTarget sources_data = 1;
inline int Router::_internal_sources_data_size() const {
  return sources_data_.size();
}
inline int Router::sources_data_size() const {
  return _internal_sources_data_size();
}
inline void Router::clear_sources_data() {
  sources_data_.Clear();
}
inline ::transport_catalogue_proto::RoutesInternalDataByTarget* Router::mutable_sources_data(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Router.sources_data)
  return sources_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RoutesInternalDataByTarget >*
Router::mutable_sources_data() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Router.sources_data)
  return &sources_data_;
}
inline const ::transport_catalogue_proto::RoutesInternalDataByTarget& Router::_internal_sources_data(int index) const {
  return sources_data_.Get(index);
}
inline const ::transport_catalogue_proto::RoutesInternalDataByTarget& Router::sources_data(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Router.sources_data)
  return _internal_sources_data(index);
}
inline ::transport_catalogue_proto::RoutesInternalDataByTarget* Router::_internal_add_sources_data() {
  return sources_data_.Add();
}
inline ::transport_catalogue_proto::RoutesInternalDataByTarget* Router::add_sources_data() {
  ::transport_catalogue_proto::RoutesInternalDataByTarget* _add = _internal_add_sources_data();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Router.sources_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::RoutesInternalDataByTarget >&
Router::sources_data() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Router.sources_data)
  return sources_data_;
}

// -------------------------------------------------------------------

// TransportRouter

// .transport_catalogue_proto.RoutingSettings routing_settings = 1;
inline bool TransportRouter::_internal_has_routing_settings() const {
  return this != internal_default_instance() && routing_settings_ != nullptr;
}
inline bool TransportRouter::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void TransportRouter::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
}
inline const ::transport_catalogue_proto::RoutingSettings& TransportRouter::_internal_routing_settings() const {
  const ::transport_catalogue_proto::RoutingSettings* p = routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::RoutingSettings&>(
      ::transport_catalogue_proto::_RoutingSettings_default_instance_);
}
inline const ::transport_catalogue_proto::RoutingSettings& TransportRouter::routing_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.routing_settings)
  return _internal_routing_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_routing_settings(
    ::transport_catalogue_proto::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_settings_);
  }
  routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportRouter.routing_settings)
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::release_routing_settings() {
  
  ::transport_catalogue_proto::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportRouter.routing_settings)
  
  ::transport_catalogue_proto::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::_internal_mutable_routing_settings() {
  
  if (routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::RoutingSettings>(GetArenaForAllocation());
    routing_settings_ = p;
  }
  return routing_settings_;
}
inline ::transport_catalogue_proto::RoutingSettings* TransportRouter::mutable_routing_settings() {
  ::transport_catalogue_proto::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.routing_settings)
  return _msg;
}
inline void TransportRouter::set_allocated_routing_settings(::transport_catalogue_proto::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::transport_catalogue_proto::RoutingSettings>::GetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportRouter.routing_settings)
}

// .transport_catalogue_proto.DirectedWeightedGraph graph = 2;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::transport_catalogue_proto::DirectedWeightedGraph& TransportRouter::_internal_graph() const {
  const ::transport_catalogue_proto::DirectedWeightedGraph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::DirectedWeightedGraph&>(
      ::transport_catalogue_proto::_DirectedWeightedGraph_default_instance_);
}
inline const ::transport_catalogue_proto::DirectedWeightedGraph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::transport_catalogue_proto::DirectedWeightedGraph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportRouter.graph)
}
inline ::transport_catalogue_proto::DirectedWeightedGraph* TransportRouter::release_graph() {
  
  ::transport_catalogue_proto::DirectedWeightedGraph* temp = graph_;
  graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::DirectedWeightedGraph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportRouter.graph)
  
  ::transport_catalogue_proto::DirectedWeightedGraph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::DirectedWeightedGraph* TransportRouter::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::DirectedWeightedGraph>(GetArenaForAllocation());
    graph_ = p;
  }
  return graph_;
}
inline ::transport_catalogue_proto::DirectedWeightedGraph* TransportRouter::mutable_graph() {
  ::transport_catalogue_proto::DirectedWeightedGraph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::transport_catalogue_proto::DirectedWeightedGraph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportRouter.graph)
}

// .transport_catalogue_proto.Router router = 3;
inline bool TransportRouter::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportRouter::has_router() const {
  return _internal_has_router();
}
inline void TransportRouter::clear_router() {
  if (GetArenaForAllocation() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
inline const ::transport_catalogue_proto::Router& TransportRouter::_internal_router() const {
  const ::transport_catalogue_proto::Router* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::Router&>(
      ::transport_catalogue_proto::_Router_default_instance_);
}
inline const ::transport_catalogue_proto::Router& TransportRouter::router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.router)
  return _internal_router();
}
inline void TransportRouter::unsafe_arena_set_allocated_router(
    ::transport_catalogue_proto::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportRouter.router)
}
inline ::transport_catalogue_proto::Router* TransportRouter::release_router() {
  
  ::transport_catalogue_proto::Router* temp = router_;
  router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::Router* TransportRouter::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportRouter.router)
  
  ::transport_catalogue_proto::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::Router* TransportRouter::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::Router>(GetArenaForAllocation());
    router_ = p;
  }
  return router_;
}
inline ::transport_catalogue_proto::Router* TransportRouter::mutable_router() {
  ::transport_catalogue_proto::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.router)
  return _msg;
}
inline void TransportRouter::set_allocated_router(::transport_catalogue_proto::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete router_;
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::transport_catalogue_proto::Router>::GetOwningArena(router);
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportRouter.router)
}

// repeated .transport_catalogue_proto.StopVertexIds stops_vertex_ids = 4;
inline int TransportRouter::_internal_stops_vertex_ids_size() const {
  return stops_vertex_ids_.size();
}
inline int TransportRouter::stops_vertex_ids_size() const {
  return _internal_stops_vertex_ids_size();
}
inline void TransportRouter::clear_stops_vertex_ids() {
  stops_vertex_ids_.Clear();
}
inline ::transport_catalogue_proto::StopVertexIds* TransportRouter::mutable_stops_vertex_ids(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return stops_vertex_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >*
TransportRouter::mutable_stops_vertex_ids() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return &stops_vertex_ids_;
}
inline const ::transport_catalogue_proto::StopVertexIds& TransportRouter::_internal_stops_vertex_ids(int index) const {
  return stops_vertex_ids_.Get(index);
}
inline const ::transport_catalogue_proto::StopVertexIds& TransportRouter::stops_vertex_ids(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return _internal_stops_vertex_ids(index);
}
inline ::transport_catalogue_proto::StopVertexIds* TransportRouter::_internal_add_stops_vertex_ids() {
  return stops_vertex_ids_.Add();
}
inline ::transport_catalogue_proto::StopVertexIds* TransportRouter::add_stops_vertex_ids() {
  ::transport_catalogue_proto::StopVertexIds* _add = _internal_add_stops_vertex_ids();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::StopVertexIds >&
TransportRouter::stops_vertex_ids() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportRouter.stops_vertex_ids)
  return stops_vertex_ids_;
}

// repeated .transport_catalogue_proto.VertexInfo vertices_info = 5;
inline int TransportRouter::_internal_vertices_info_size() const {
  return vertices_info_.size();
}
inline int TransportRouter::vertices_info_size() const {
  return _internal_vertices_info_size();
}
inline void TransportRouter::clear_vertices_info() {
  vertices_info_.Clear();
}
inline ::transport_catalogue_proto::VertexInfo* TransportRouter::mutable_vertices_info(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.vertices_info)
  return vertices_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >*
TransportRouter::mutable_vertices_info() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportRouter.vertices_info)
  return &vertices_info_;
}
inline const ::transport_catalogue_proto::VertexInfo& TransportRouter::_internal_vertices_info(int index) const {
  return vertices_info_.Get(index);
}
inline const ::transport_catalogue_proto::VertexInfo& TransportRouter::vertices_info(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.vertices_info)
  return _internal_vertices_info(index);
}
inline ::transport_catalogue_proto::VertexInfo* TransportRouter::_internal_add_vertices_info() {
  return vertices_info_.Add();
}
inline ::transport_catalogue_proto::VertexInfo* TransportRouter::add_vertices_info() {
  ::transport_catalogue_proto::VertexInfo* _add = _internal_add_vertices_info();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportRouter.vertices_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::VertexInfo >&
TransportRouter::vertices_info() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportRouter.vertices_info)
  return vertices_info_;
}

// repeated .transport_catalogue_proto.EdgeInfo edges_info = 6;
inline int TransportRouter::_internal_edges_info_size() const {
  return edges_info_.size();
}
inline int TransportRouter::edges_info_size() const {
  return _internal_edges_info_size();
}
inline void TransportRouter::clear_edges_info() {
  edges_info_.Clear();
}
inline ::transport_catalogue_proto::EdgeInfo* TransportRouter::mutable_edges_info(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportRouter.edges_info)
  return edges_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >*
TransportRouter::mutable_edges_info() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportRouter.edges_info)
  return &edges_info_;
}
inline const ::transport_catalogue_proto::EdgeInfo& TransportRouter::_internal_edges_info(int index) const {
  return edges_info_.Get(index);
}
inline const ::transport_catalogue_proto::EdgeInfo& TransportRouter::edges_info(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportRouter.edges_info)
  return _internal_edges_info(index);
}
inline ::transport_catalogue_proto::EdgeInfo* TransportRouter::_internal_add_edges_info() {
  return edges_info_.Add();
}
inline ::transport_catalogue_proto::EdgeInfo* TransportRouter::add_edges_info() {
  ::transport_catalogue_proto::EdgeInfo* _add = _internal_add_edges_info();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportRouter.edges_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::EdgeInfo >&
TransportRouter::edges_info() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportRouter.edges_info)
  return edges_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
